{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-crewai-documentation","title":"Welcome to crewAI Documentation","text":"<p>\ud83e\udd16 Cutting-edge framework for orchestrating role-playing, autonomous AI agents. By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.</p> <p> </p>"},{"location":"#core-concepts","title":"Core Concepts","text":"<ul> <li>Understanding Agents</li> <li>Creating Tasks</li> <li>Defining Tasks</li> <li>Managing Processes</li> <li>Collaboration and Delegation</li> <li>Agent Tools</li> </ul>"},{"location":"#how-to-guides","title":"How-To Guides","text":"<ul> <li>Connecting to LLMs</li> <li>Customizing Agents</li> <li>Creating a Crew and kick it off</li> <li>Human Input on Execution</li> </ul>"},{"location":"#examples-and-tutorials","title":"Examples and Tutorials","text":"<p>You can test different real life examples of AI crews in the examples repo</p> <ul> <li>Trip Planner</li> <li>Stock Analysis</li> <li>Landing Page Generator</li> <li>Having Human input on the execution</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Agent API[WIP]</li> <li>Task API[WIP]</li> <li>Crew API[WIP]</li> <li>Process API[WIP]</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>To get started with CrewAI, follow these simple steps:</p> <ol> <li>Installation:</li> </ol> <pre><code>pip install crewai\n</code></pre> <p>The example below also uses duckduckgo, so also install that</p> <pre><code>pip install duckduckgo-search\n</code></pre> <ol> <li>Setting Up Your Crew:</li> </ol> <pre><code>import os\nfrom crewai import Agent, Task, Crew, Process\n\nos.environ[\"OPENAI_API_KEY\"] = \"YOUR KEY\"\n\n# You can choose to use a local model through Ollama for example. See ./docs/llm-connections.md for more information.\n# from langchain.llms import Ollama\n# ollama_llm = Ollama(model=\"openhermes\")\n\n# Install duckduckgo-search for this example:\n# !pip install -U duckduckgo-search\n\nfrom langchain.tools import DuckDuckGoSearchRun\nsearch_tool = DuckDuckGoSearchRun()\n\n# Define your agents with roles and goals\nresearcher = Agent(\n  role='Senior Research Analyst',\n  goal='Uncover cutting-edge developments in AI and data science',\n  backstory=\"\"\"You work at a leading tech think tank.\n  Your expertise lies in identifying emerging trends.\n  You have a knack for dissecting complex data and presenting\n  actionable insights.\"\"\",\n  verbose=True,\n  allow_delegation=False,\n  tools=[search_tool]\n  # You can pass an optional llm attribute specifying what mode you wanna use.\n  # It can be a local model through Ollama / LM Studio or a remote\n  # model like OpenAI, Mistral, Antrophic of others (https://python.langchain.com/docs/integrations/llms/)\n  #\n  # Examples:\n  # llm=ollama_llm # was defined above in the file\n  # llm=ChatOpenAI(model_name=\"gpt-3.5\", temperature=0.7)\n)\nwriter = Agent(\n  role='Tech Content Strategist',\n  goal='Craft compelling content on tech advancements',\n  backstory=\"\"\"You are a renowned Content Strategist, known for\n  your insightful and engaging articles.\n  You transform complex concepts into compelling narratives.\"\"\",\n  verbose=True,\n  allow_delegation=True,\n  # (optional) llm=ollama_llm\n)\n\n# Create tasks for your agents\ntask1 = Task(\n  description=\"\"\"Conduct a comprehensive analysis of the latest advancements in AI in 2024.\n  Identify key trends, breakthrough technologies, and potential industry impacts.\n  Your final answer MUST be a full analysis report\"\"\",\n  agent=researcher\n)\n\ntask2 = Task(\n  description=\"\"\"Using the insights provided, develop an engaging blog\n  post that highlights the most significant AI advancements.\n  Your post should be informative yet accessible, catering to a tech-savvy audience.\n  Make it sound cool, avoid complex words so it doesn't sound like AI.\n  Your final answer MUST be the full blog post of at least 4 paragraphs.\"\"\",\n  agent=writer\n)\n\n# Instantiate your crew with a sequential process\ncrew = Crew(\n  agents=[researcher, writer],\n  tasks=[task1, task2],\n  verbose=2, # You can set it to 1 or 2 to different logging levels\n)\n\n# Get your crew to work!\nresult = crew.kickoff()\n\nprint(\"######################\")\nprint(result)\n</code></pre> <p>Currently the only supported process is <code>Process.sequential</code>, where one task is executed after the other and the outcome of one is passed as extra content into this next.</p>"},{"location":"core-concepts/Agent-Tools/","title":"What is a Tool?","text":"<p>A tool in CrewAI is a function or capability that an agent can utilize to perform actions, gather information, or interact with external systems, behind the scenes tools are LangChain Tools. These tools can be as straightforward as a search function or as sophisticated as integrations with other chains or APIs.</p>"},{"location":"core-concepts/Agent-Tools/#key-characteristics-of-tools","title":"Key Characteristics of Tools","text":"<ul> <li>Utility: Tools are designed to serve specific purposes, such as searching the web, analyzing data, or generating content.</li> <li>Integration: Tools can be integrated into agents to extend their capabilities beyond their basic functions.</li> <li>Customizability: Developers can create custom tools tailored to the specific needs of their agents or use pre-built LangChain ones available in the ecosystem.</li> </ul>"},{"location":"core-concepts/Agent-Tools/#creating-your-own-tools","title":"Creating your own Tools","text":"<p>You can easily create your own tool using LangChain Tool Custom Tool Creation.</p> <p>Example:</p> <pre><code>import json\nimport requests\n\nfrom crewai import Agent\nfrom langchain.tools import tool\nfrom unstructured.partition.html import partition_html\n\nclass BrowserTools():\n  @tool(\"Scrape website content\")\n  def scrape_website(website):\n    \"\"\"Useful to scrape a website content\"\"\"\n    url = f\"https://chrome.browserless.io/content?token={config('BROWSERLESS_API_KEY')}\"\n    payload = json.dumps({\"url\": website})\n    headers = {\n      'cache-control': 'no-cache',\n      'content-type': 'application/json'\n    }\n    response = requests.request(\"POST\", url, headers=headers, data=payload)\n    elements = partition_html(text=response.text)\n    content = \"\\n\\n\".join([str(el) for el in elements])\n\n    # Return only the first 5k characters\n    return content[:5000]\n\n\n# Create an agent and assign the scrapping tool\nagent = Agent(\n  role='Research Analyst',\n  goal='Provide up-to-date market analysis',\n  backstory='An expert analyst with a keen eye for market trends.',\n  tools=[BrowserTools().scrape_website]\n)\n</code></pre>"},{"location":"core-concepts/Agent-Tools/#using-existing-tools","title":"Using Existing Tools","text":"<p>Check LangChain Integration for a set of useful existing tools. To assign a tool to an agent, you'd provide it as part of the agent's properties during initialization.</p> <pre><code>from crewai import Agent\nfrom langchain.agents import Tool\nfrom langchain.utilities import GoogleSerperAPIWrapper\n\n# Initialize SerpAPI tool with your API key\nos.environ[\"OPENAI_API_KEY\"] = \"Your Key\"\nos.environ[\"SERPER_API_KEY\"] = \"Your Key\"\n\nsearch = GoogleSerperAPIWrapper()\n\n# Create tool to be used by agent\nserper_tool = Tool(\n  name=\"Intermediate Answer\",\n  func=search.run,\n  description=\"useful for when you need to ask with search\",\n)\n\n# Create an agent and assign the search tool\nagent = Agent(\n  role='Research Analyst',\n  goal='Provide up-to-date market analysis',\n  backstory='An expert analyst with a keen eye for market trends.',\n  tools=[serper_tool]\n)\n</code></pre>"},{"location":"core-concepts/Agent-Tools/#tool-interaction","title":"Tool Interaction","text":"<p>Tools enhance an agent's ability to perform tasks autonomously or in collaboration with other agents. For instance, an agent might use a search tool to gather information, then pass that data to another agent specialized in analysis.</p>"},{"location":"core-concepts/Agent-Tools/#conclusion","title":"Conclusion","text":"<p>Tools are vital components that expand the functionality of agents within the CrewAI framework. They enable agents to perform a wide range of actions and collaborate effectively with one another. As you build with CrewAI, consider the array of tools you can leverage to empower your agents and how they can be interwoven to create a robust AI ecosystem.</p>"},{"location":"core-concepts/Creating-Tasks/","title":"What is a Task?","text":"<p>A Task in CrewAI is essentially a job or an assignment that an AI agent needs to complete. It's defined by what needs to be done and can include additional information like which agent should do it and what tools they might need.</p>"},{"location":"core-concepts/Creating-Tasks/#task-properties","title":"Task Properties","text":"<ul> <li>Description: A clear, concise statement of what the task entails.</li> <li>Agent: Optionally, you can specify which agent is responsible for the task. If not, the crew's process will determine who takes it on.</li> <li>Tools: These are the functions or capabilities the agent can utilize to perform the task. They can be anything from simple actions like 'search' to more complex interactions with other agents or APIs.</li> </ul>"},{"location":"core-concepts/Creating-Tasks/#integrating-tools-with-tasks","title":"Integrating Tools with Tasks","text":"<p>In CrewAI, tools are functions from the <code>langchain</code> toolkit that agents can use to interact with the world. These can be generic utilities or specialized functions designed for specific actions. When you assign tools to a task, they empower the agent to perform its duties more effectively.</p>"},{"location":"core-concepts/Creating-Tasks/#example-of-creating-a-task-with-tools","title":"Example of Creating a Task with Tools","text":"<pre><code>from crewai import Task\nfrom langchain.agents import Tool\nfrom langchain.utilities import GoogleSerperAPIWrapper\n\n# Initialize SerpAPI tool with your API key\nos.environ[\"OPENAI_API_KEY\"] = \"Your Key\"\nos.environ[\"SERPER_API_KEY\"] = \"Your Key\"\n\nsearch = GoogleSerperAPIWrapper()\n\n# Create tool to be used by agent\nserper_tool = Tool(\n  name=\"Intermediate Answer\",\n  func=search.run,\n  description=\"useful for when you need to ask with search\",\n)\n\n# Create a task with a description and the search tool\ntask = Task(\n  description='Find and summarize the latest and most relevant news on AI',\n  tools=[serper_tool]\n)\n</code></pre> <p>When the task is executed by an agent, the tools specified in the task will override the agent's default tools. This means that for the duration of this task, the agent will use the search tool provided, even if it has other tools assigned to it.</p>"},{"location":"core-concepts/Creating-Tasks/#tool-override-mechanism","title":"Tool Override Mechanism","text":"<p>The ability to override an agent's tools with those specified in a task allows for greater flexibility. An agent might generally use a set of standard tools, but for certain tasks, you may want it to use a particular tool that is more suited to the task at hand.</p>"},{"location":"core-concepts/Creating-Tasks/#conclusion","title":"Conclusion","text":"<p>Creating tasks with the right tools is crucial in CrewAI. It ensures that your agents are not only aware of what they need to do but are also equipped with the right functions to do it effectively. This feature underlines the flexibility and power of the CrewAI system, where tasks can be tailored with specific tools to achieve the best outcome.</p>"},{"location":"core-concepts/Defining-Tasks/","title":"Overview of a Task","text":"<p>In the CrewAI framework, tasks are the individual assignments that agents are responsible for completing. They are the fundamental units of work that your AI crew will undertake. Understanding how to define and manage tasks is key to leveraging the full potential of CrewAI.</p> <p>A task in CrewAI encapsulates all the information needed for an agent to execute it, including a description, the agent assigned to it, and any specific tools required. Tasks are designed to be flexible, allowing for both simple and complex actions depending on your needs.</p>"},{"location":"core-concepts/Defining-Tasks/#properties-of-a-task","title":"Properties of a Task","text":"<p>Every task in CrewAI has several properties:</p> <ul> <li>Description: A clear and concise statement of what needs to be done.</li> <li>Agent: The agent assigned to the task (optional). If no agent is specified, the task can be picked up by any agent based on the process defined.</li> <li>Tools: A list of tools (optional) that the agent can use to complete the task. These can override the agent's default tools if necessary.</li> </ul>"},{"location":"core-concepts/Defining-Tasks/#creating-a-task","title":"Creating a Task","text":"<p>Creating a task is straightforward. You define what needs to be done and, optionally, who should do it and what tools they should use. Here\u2019s a conceptual guide:</p> <pre><code>from crewai import Task\n\n# Define a task with a designated agent and specific tools\ntask = Task(description='Generate monthly sales report', agent=sales_agent, tools=[reporting_tool])\n</code></pre>"},{"location":"core-concepts/Defining-Tasks/#task-assignment","title":"Task Assignment","text":"<p>Tasks can be assigned to agents in several ways:</p> <ul> <li>Directly, by specifying the agent when creating the task.</li> <li>[WIP] Through the Crew's process, which can assign tasks based on agent roles, availability, or other criteria.</li> </ul>"},{"location":"core-concepts/Defining-Tasks/#task-execution","title":"Task Execution","text":"<p>Once a task has been defined and assigned, it's ready to be executed. Execution is typically handled by the Crew object, which manages the workflow and ensures that tasks are completed according to the defined process.</p>"},{"location":"core-concepts/Defining-Tasks/#task-collaboration","title":"Task Collaboration","text":"<p>Tasks in CrewAI can be designed to require collaboration between agents. For example, one agent might gather data while another analyzes it. This collaborative approach can be defined within the task properties and managed by the Crew's process.</p>"},{"location":"core-concepts/Defining-Tasks/#conclusion","title":"Conclusion","text":"<p>Tasks are the driving force behind the actions of agents in CrewAI. By properly defining tasks, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit. In the following sections, we will explore how tasks fit into the larger picture of processes and crew management.</p>"},{"location":"core-concepts/Delegation-and-Collaboration/","title":"How Agents Collaborate:","text":"<p>In CrewAI, collaboration is the cornerstone of agent interaction. Agents are designed to work together by sharing information, requesting assistance, and combining their skills to complete tasks more efficiently.</p> <ul> <li>Information Sharing: Agents can share findings and data amongst themselves to ensure all members are informed and can contribute effectively.</li> <li>Task Assistance: If an agent encounters a task that requires additional expertise, it can seek the help of another agent with the necessary skill set.</li> <li>Resource Allocation: Agents can share or allocate resources such as tools or processing power to optimize task execution.</li> </ul> <p>Collaboration is embedded in the DNA of CrewAI, enabling a dynamic and adaptive approach to problem-solving.</p>"},{"location":"core-concepts/Delegation-and-Collaboration/#delegation-dividing-to-conquer","title":"Delegation: Dividing to Conquer","text":"<p>Delegation is the process by which an agent assigns a task to another agent, or just ask another agent, it's an intelligent decision-making process that enhances the crew's functionality. By default all agents can delegate work and ask questions, so if you want an agent to work alone make sure to set that option when initializing an Agent, this is useful to prevent deviations if the task is supposed to be straightforward.</p>"},{"location":"core-concepts/Delegation-and-Collaboration/#implementing-collaboration-and-delegation","title":"Implementing Collaboration and Delegation","text":"<p>When setting up your crew, you'll define the roles and capabilities of each agent. CrewAI's infrastructure takes care of the rest, managing the complex interplay of agents as they work together.</p>"},{"location":"core-concepts/Delegation-and-Collaboration/#example-scenario","title":"Example Scenario:","text":"<p>Imagine a scenario where you have a researcher agent that gathers data and a writer agent that compiles reports. The writer can autonomously ask question or delegate more in depth research work depending on its needs as it tries to complete its task.</p>"},{"location":"core-concepts/Delegation-and-Collaboration/#conclusion","title":"Conclusion","text":"<p>Collaboration and delegation are what transform a collection of AI agents into a unified, intelligent crew. With CrewAI, you have a framework that not only simplifies these interactions but also makes them more effective, paving the way for sophisticated AI systems that can tackle complex, multi-dimensional tasks.</p>"},{"location":"core-concepts/Managing-Processes/","title":"Managing Processes in CrewAI","text":"<p>Processes are the heart of CrewAI's workflow management, akin to the way a human team organizes its work. In CrewAI, processes define the sequence and manner in which tasks are executed by agents, mirroring the coordination you'd expect in a well-functioning team of people.</p>"},{"location":"core-concepts/Managing-Processes/#understanding-processes","title":"Understanding Processes","text":"<p>A process in CrewAI can be thought of as the game plan for how your AI agents will handle their workload. Just as a project manager assigns tasks to team members based on their skills and the project timeline, CrewAI processes assign tasks to agents to ensure efficient workflow.</p>"},{"location":"core-concepts/Managing-Processes/#process-implementations","title":"Process Implementations","text":"<ul> <li>Sequential (Supported): This process ensures tasks are handled one at a time, in a given order, much like a relay race where one runner passes the baton to the next.</li> <li>Hierarchical: This process introduces a chain of command to task execution. You define the crew and the system assigns a manager to properly coordinate the planning and execution of tasks through delegation and validation of results, akin to a traditional corporate hierarchy.</li> <li>Consensual (WIP): Envisioned for a future update, the consensual process will enable agents to make joint decisions on task execution, similar to a team consensus in a meeting before proceeding. These additional processes, once implemented, will offer more nuanced and sophisticated ways for agents to interact and complete tasks, much like teams in complex organizational structures.</li> </ul>"},{"location":"core-concepts/Managing-Processes/#the-role-of-processes-in-teamwork","title":"The Role of Processes in Teamwork","text":"<p>The process you choose for your crew is critical. It's what transforms a group of individual agents into a cohesive unit that can tackle complex projects with the precision and harmony you'd find in a team of skilled humans.</p>"},{"location":"core-concepts/Managing-Processes/#assigning-processes-to-a-crew","title":"Assigning Processes to a Crew","text":"<p>To assign a process to a crew, simply set it during the crew's creation. The process will dictate the crew's approach to task execution. Different from the sequential process, you don't need to assign an agent to a task.</p> <pre><code>from crewai import Crew\nfrom crewai.process import Process\n\n# Create a crew with a sequential process\ncrew = Crew(agents=my_agents, tasks=my_tasks, process=Process.sequential)\n# OR create a crew with a hierarchical process\ncrew = Crew(agents=my_agents, tasks=my_tasks, process=Process.hierarchical)\n</code></pre>"},{"location":"core-concepts/Managing-Processes/#sequential-process","title":"Sequential Process","text":"<p>The sequential process is where much of CrewAI's magic happens. It ensures that tasks are approached with the same thoughtful progression that a human team would use, fostering a natural and logical flow of work while passing on task outcome into the next.</p>"},{"location":"core-concepts/Managing-Processes/#hierarchical-process","title":"Hierarchical Process","text":"<p>The hierarchical process is tiny bit more magic, as the chain of command and task assignment is hidden from the user. The system will automatically assign a manager the execute the tasks, but the agent will never execute the job by itself. Instead, the manager will plan the steps to execute the task and delegate the work to the agents. The agents will then execute the task and report back to the manager, who will validate the results and pass the task outcome to the next task.</p>"},{"location":"core-concepts/Managing-Processes/#conclusion","title":"Conclusion","text":"<p>Processes bring structure and order to the CrewAI ecosystem, allowing agents to collaborate effectively and accomplish goals systematically. As CrewAI evolves, additional process types will be introduced to enhance the framework's versatility, much like a team that grows and adapts over time.</p>"},{"location":"core-concepts/Understanding-Agents/","title":"What is an Agent?","text":"<p>In CrewAI, an agent is an autonomous unit programmed to perform tasks, make decisions, and communicate with other agents. Think of an agent as a member of a team, with specific skills and a particular job to do. Agents can have different roles like 'Researcher', 'Writer', or 'Customer Support', each contributing to the overall goal of the crew.</p>"},{"location":"core-concepts/Understanding-Agents/#key-properties-of-an-agent","title":"Key Properties of an Agent","text":"<ul> <li>Role: Defines the agent's function within the crew. It determines the kind of tasks the agent is best suited for.</li> <li>Goal: The individual objective that the agent aims to achieve. It guides the agent's decision-making process.</li> <li>Backstory: Provides context to the agent's role and goal, enriching the interaction and collaboration dynamics.</li> <li>Tools: A set of capabilities or functions that the agent can use to perform tasks. Tools can be shared or exclusive to specific agents.</li> <li>Verbose: This allow you to actually see what is going on during the Crew execution.</li> <li>Allow Delegation: Agents can delegate tasks or questions to one another, ensuring that each task is handled by the most suitable agent.</li> </ul>"},{"location":"core-concepts/Understanding-Agents/#agent-lifecycle","title":"Agent Lifecycle","text":"<ol> <li>Initialization: An agent is created with a defined role, goal, backstory, and set of tools.</li> <li>Task Assignment: The agent is assigned tasks either directly or through the crew's process management.</li> <li>Execution: The agent performs the task using its available tools and in accordance with its role and goal.</li> <li>Collaboration: Throughout the execution, the agent can communicate with other agents to delegate, inquire, or assist.</li> </ol>"},{"location":"core-concepts/Understanding-Agents/#creating-an-agent","title":"Creating an Agent","text":"<p>To create an agent, you would typically initialize an instance of the <code>Agent</code> class with the desired properties. Here's a conceptual example:</p> <pre><code>from crewai import Agent\n\n# Create an agent with a role and a goal\nagent = Agent(\n  role='Data Analyst',\n  goal='Extract actionable insights',\n  verbose=True,\n  backstory=\"You'er a data analyst at a large company. I am responsible for analyzing data and providing insights to the business. I am currently working on a project to analyze the performance of our marketing campaigns. I have been asked to provide insights on how to improve the performance of our marketing campaigns.\"\n)\n</code></pre>"},{"location":"core-concepts/Understanding-Agents/#agent-interaction","title":"Agent Interaction","text":"<p>Agents can interact with each other using the CrewAI's built-in delegation and communication mechanisms. This allows for dynamic task management and problem-solving within the crew.</p>"},{"location":"core-concepts/Understanding-Agents/#conclusion","title":"Conclusion","text":"<p>Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents, you can create sophisticated AI systems that leverage the power of collaborative intelligence.</p>"},{"location":"how-to/Creating-a-Crew-and-kick-it-off/","title":"Get a crew working","text":"<p>Assembling a Crew in CrewAI is like casting characters for a play. Each agent you create is a cast member with a unique part to play. When your crew is assembled, you'll give the signal, and they'll spring into action, each performing their role in the grand scheme of your project.</p>"},{"location":"how-to/Creating-a-Crew-and-kick-it-off/#step-1-assemble-your-agents","title":"Step 1: Assemble Your Agents","text":"<p>Start by creating your agents, each with its own role and backstory. These backstories add depth to the agents, influencing how they approach their tasks and interact with one another.</p> <pre><code>from crewai import Agent\n\n# Create a researcher agent\nresearcher = Agent(\n  role='Senior Researcher',\n  goal='Discover groundbreaking technologies',\n  verbose=True,\n  backstory='A curious mind fascinated by cutting-edge innovation and the potential to change the world, you know everything about tech.'\n)\n\n# Create a writer agent\nwriter = Agent(\n  role='Writer',\n  goal='Craft compelling stories about tech discoveries',\n  verbose=True,\n  backstory='A creative soul who translates complex tech jargon into engaging narratives for the masses, you write using simple words in a friendly and inviting tone that does not sounds like AI.'\n)\n</code></pre>"},{"location":"how-to/Creating-a-Crew-and-kick-it-off/#step-2-define-the-tasks","title":"Step 2: Define the Tasks","text":"<p>Outline the tasks that your agents need to tackle. These tasks are their missions, the specific objectives they need to achieve.</p> <pre><code>from crewai import Task\n\n# Task for the researcher\nresearch_task = Task(\n  description='Identify the next big trend in AI',\n  agent=researcher  # Assigning the task to the researcher\n)\n\n# Task for the writer\nwrite_task = Task(\n  description='Write an article on AI advancements leveraging the research made.',\n  agent=writer  # Assigning the task to the writer\n)\n</code></pre>"},{"location":"how-to/Creating-a-Crew-and-kick-it-off/#step-3-form-the-crew","title":"Step 3: Form the Crew","text":"<p>Bring your agents together into a crew. This is where you define the process they'll follow to complete their tasks.</p> <pre><code>from crewai import Crew, Process\n\n# Instantiate your crew\ntech_crew = Crew(\n  agents=[researcher, writer],\n  tasks=[research_task, write_task],\n  process=Process.sequential  # Tasks will be executed one after the other\n)\n</code></pre>"},{"location":"how-to/Creating-a-Crew-and-kick-it-off/#step-4-kick-it-off","title":"Step 4: Kick It Off","text":"<p>With the crew formed and the stage set, it's time to start the show. Kick off the process and watch as your agents collaborate to achieve their goals.</p> <pre><code># Begin the task execution\ntech_crew.kickoff()\n</code></pre>"},{"location":"how-to/Creating-a-Crew-and-kick-it-off/#conclusion","title":"Conclusion","text":"<p>Creating a crew and setting it into motion is a straightforward process in CrewAI. With each agent playing their part and a clear set of tasks, your AI ensemble is ready to take on any challenge. Remember, the richness of their backstories and the clarity of their goals will greatly enhance their performance and the outcomes of their collaboration.</p>"},{"location":"how-to/Customizing-Agents/","title":"Customizable Attributes","text":"<p>Customizing your AI agents is a cornerstone of creating an effective CrewAI team. Each agent can be tailored to fit the unique needs of your project, allowing for a dynamic and versatile AI workforce.</p> <p>When you initialize an Agent, you can set various attributes that define its behavior and role within the Crew:</p> <ul> <li>Role: The job title or function of the agent within your crew. This can be anything from 'Analyst' to 'Customer Service Rep'.</li> <li>Goal: What the agent is aiming to achieve. Goals should be aligned with the agent's role and the overall objectives of the crew.</li> <li>Backstory: A narrative that provides depth to the agent's character. This could include previous experience, motivations, or anything that adds context to their role.</li> <li>Tools: The abilities or methods the agent uses to complete tasks. This could be as simple as a 'search' function or as complex as a custom-built analysis tool.</li> </ul>"},{"location":"how-to/Customizing-Agents/#understanding-tools-in-crewai","title":"Understanding Tools in CrewAI","text":"<p>Tools in CrewAI are functions that empower agents to interact with the world around them. These can range from generic utilities like a search function to more complex ones like integrating with an external API. The integration with LangChain allows you to utilize a suite of ready-to-use tools such as Google Serper, which enables agents to perform web searches and gather data.</p>"},{"location":"how-to/Customizing-Agents/#customizing-agents-and-tools","title":"Customizing Agents and Tools","text":"<p>You can customize an agent by passing parameters when creating an instance. Each parameter tweaks how the agent behaves and interacts within the crew.</p> <p>Customizing an agent's tools is particularly important. Tools define what an agent can do and how it interacts with tasks. For instance, if a task requires data analysis, assigning an agent with data-related tools would be optimal.</p> <p>When initializing your agents, you can equip them with a set of tools that enable them to perform their roles more effectively:</p> <pre><code>from crewai import Agent\nfrom langchain.agents import Tool\nfrom langchain.utilities import GoogleSerperAPIWrapper\n\n# Initialize SerpAPI tool with your API key\nos.environ[\"OPENAI_API_KEY\"] = \"Your Key\"\nos.environ[\"SERPER_API_KEY\"] = \"Your Key\"\n\nsearch = GoogleSerperAPIWrapper()\n\n# Create tool to be used by agent\nserper_tool = Tool(\n  name=\"Intermediate Answer\",\n  func=search.run,\n  description=\"useful for when you need to ask with search\",\n)\n\n# Create an agent and assign the search tool\nagent = Agent(\n  role='Research Analyst',\n  goal='Provide up-to-date market analysis',\n  backstory='An expert analyst with a keen eye for market trends.',\n  tools=[serper_tool]\n)\n</code></pre>"},{"location":"how-to/Customizing-Agents/#delegation-and-autonomy","title":"Delegation and Autonomy","text":"<p>One of the most powerful aspects of CrewAI agents is their ability to delegate tasks to one another. Each agent by default can delegate work or ask question to anyone in the crew, but you can disable that by setting <code>allow_delegation</code> to <code>false</code>, this is particularly useful for straightforward agents that should execute their tasks in isolation.</p> <pre><code>agent = Agent(\n  role='Content Writer',\n  goal='Write the most amazing content related to market trends an business.',\n  backstory='An expert writer with many years of experience in market trends, stocks and all business related things.',\n  allow_delegation=False\n)\n</code></pre>"},{"location":"how-to/Customizing-Agents/#conclusion","title":"Conclusion","text":"<p>Customization is what makes CrewAI powerful. By adjusting the attributes of each agent, you can ensure that your AI team is well-equipped to handle the challenges you set for them. Remember, the more thought you put into your agents' roles, goals, backstories, and tools, the more nuanced and effective their interactions and task execution will be.</p>"},{"location":"how-to/Human-Input-on-Execution/","title":"Human Input on Execution","text":"<p>Human inputs is important in many agent execution use cases, humans are AGI so they can can be prompted to step in and provide extra details ins necessary. Using it with crewAI is pretty straightforward and you can do it through a LangChain Tool.  Check LangChain Integration for more details:</p> <p>Example:</p> <pre><code>import os\nfrom crewai import Agent, Task, Crew, Process\nfrom langchain.tools import DuckDuckGoSearchRun\nfrom langchain.agents import load_tools\n\nsearch_tool = DuckDuckGoSearchRun()\n\n# Loading Human Tools\nhuman_tools = load_tools([\"human\"])\n\n# Define your agents with roles and goals\nresearcher = Agent(\n  role='Senior Research Analyst',\n  goal='Uncover cutting-edge developments in AI and data science in',\n  backstory=\"\"\"You are a Senior Research Analyst at a leading tech think tank.\n  Your expertise lies in identifying emerging trends and technologies in AI and\n  data science. You have a knack for dissecting complex data and presenting\n  actionable insights.\"\"\",\n  verbose=True,\n  allow_delegation=False,\n  # Passing human tools to the agent\n  tools=[search_tool]+human_tools\n)\nwriter = Agent(\n  role='Tech Content Strategist',\n  goal='Craft compelling content on tech advancements',\n  backstory=\"\"\"You are a renowned Tech Content Strategist, known for your insightful\n  and engaging articles on technology and innovation. With a deep understanding of\n  the tech industry, you transform complex concepts into compelling narratives.\"\"\",\n  verbose=True,\n  allow_delegation=True\n)\n\n# Create tasks for your agents\n# Being explicit on the task to ask for human feedback.\ntask1 = Task(\n  description=\"\"\"Conduct a comprehensive analysis of the latest advancements in AI in 2024.\n  Identify key trends, breakthrough technologies, and potential industry impacts.\n  Compile your findings in a detailed report. \n  Make sure to check with the human if the draft is good before returning your Final Answer.\n  Your final answer MUST be a full analysis report\"\"\",\n  agent=researcher\n)\n\ntask2 = Task(\n  description=\"\"\"Using the insights from the researcher's report, develop an engaging blog\n  post that highlights the most significant AI advancements.\n  Your post should be informative yet accessible, catering to a tech-savvy audience.\n  Aim for a narrative that captures the essence of these breakthroughs and their\n  implications for the future. \n  Your final answer MUST be the full blog post of at least 3 paragraphs.\"\"\",\n  agent=writer\n)\n\n# Instantiate your crew with a sequential process\ncrew = Crew(\n  agents=[researcher, writer],\n  tasks=[task1, task2],\n  verbose=2\n)\n\n# Get your crew to work!\nresult = crew.kickoff()\n\nprint(\"######################\")\nprint(result)\n</code></pre>"},{"location":"how-to/LLM-Connections/","title":"Connect CrewAI to LLMs","text":"<p>There are different types of connections. Ollama is the recommended way to connect to local LLMs. Azure uses a slightly different API and therefore has it's own connection object.</p> <p>crewAI is compatible with any of the LangChain LLM components. See this page for more information: https://python.langchain.com/docs/integrations/llms/</p>"},{"location":"how-to/LLM-Connections/#ollama","title":"Ollama","text":"<p>crewAI supports integration with local models thorugh Ollama for enhanced flexibility and customization. This allows you to utilize your own models, which can be particularly useful for specialized tasks or data privacy concerns. We will conver other options for using local models in later sections. However, ollama is the recommended tool to use to host local models when possible.</p>"},{"location":"how-to/LLM-Connections/#setting-up-ollama","title":"Setting Up Ollama","text":"<ul> <li>Install Ollama: Ensure that Ollama is properly installed in your environment. Follow the installation guide provided by Ollama for detailed instructions.</li> <li>Configure Ollama: Set up Ollama to work with your local model. You will probably need to tweak the model using a Modelfile. I'd recommend adding <code>Observation</code> as a stop word and playing with <code>top_p</code> and <code>temperature</code>.</li> </ul>"},{"location":"how-to/LLM-Connections/#integrating-ollama-with-crewai","title":"Integrating Ollama with CrewAI","text":"<ul> <li>Instantiate Ollama Model: Create an instance of the Ollama model. You can specify the model and the base URL during instantiation. For example:</li> </ul> <pre><code>from langchain.llms import Ollama\nollama_openhermes = Ollama(model=\"openhermes\")\n# Pass Ollama Model to Agents: When creating your agents within the CrewAI framework, you can pass the Ollama model as an argument to the Agent constructor. For instance:\n\nlocal_expert = Agent(\n  role='Local Expert at this city',\n  goal='Provide the BEST insights about the selected city',\n  backstory=\"\"\"A knowledgeable local guide with extensive information\n  about the city, it's attractions and customs\"\"\",\n  tools=[\n    SearchTools.search_internet,\n    BrowserTools.scrape_and_summarize_website,\n  ],\n  llm=ollama_openhermes, # Ollama model passed here\n  verbose=True\n)\n</code></pre>"},{"location":"how-to/LLM-Connections/#open-ai-compatible-api-endpoints","title":"Open AI Compatible API Endpoints","text":"<p>In the context of integrating various language models with CrewAI, the flexibility to switch between different API endpoints is a crucial feature. By utilizing environment variables for configuration details such as <code>OPENAI_API_BASE_URL</code>, <code>OPENAI_API_KEY</code>, and <code>MODEL_NAME</code>, you can easily transition between different APIs or models. For instance, if you want to switch from using the standard OpenAI GPT model to a custom or alternative version, simply update the values of these environment variables. </p> <p>The <code>OPENAI_API_BASE_URL</code> variable allows you to define the base URL of the API to connect to, while <code>OPENAI_API_KEY</code> is used for authentication purposes. Lastly, the <code>MODEL_NAME</code> variable specifies the particular language model to be used, such as \"gpt-3.5-turbo\" or any other available model. </p> <p>This method offers an easy way to adapt the system to different models or plataforms, be it for testing, scaling, or accessing different features available on various platforms. By centralizing the configuration in environment variables, the process becomes streamlined, reducing the need for extensive code modifications when switching between APIs or models.</p> <pre><code>from dotenv import load_dotenv\nfrom langchain.chat_models.openai import ChatOpenAI\n\nload_dotenv()\n\ndefalut_llm = ChatOpenAI(openai_api_base=os.environ.get(\"OPENAI_API_BASE_URL\", \"https://api.openai.com/v1\"),\n                        openai_api_key=os.environ.get(\"OPENAI_API_KEY\", \"NA\"),\n                        model_name=os.environ.get(\"MODEL_NAME\", \"gpt-3.5-turbo\"))\n\n# Create an agent and assign the LLM\nexample_agent = Agent(\n  role='Example Agent',\n  goal='Show how to assign a custom configured LLM',\n  backstory='You hang out in the docs section of GitHub repos.',\n  llm=default_llm\n)\n\n</code></pre> <p>The following sections show examples of the configuration settings for various OpenAI API compatible applications and services. We have included links to relavant documentation for the various application and services. </p>"},{"location":"how-to/LLM-Connections/#open-ai","title":"Open AI","text":"<p>OpenAI is the default LLM that will be used if you do not specify a value for the <code>llm</code> argument when creating an agent. It will also use default values for the <code>OPENAI_API_BASE_URL</code> and <code>MODEL_NAME</code>. So the only value you need to set when using the OpenAI endpoint is the API key that from your account.</p> <pre><code># Required\nOPENAI_API_KEY=\"sk-...\"\n\n# Optional\nOPENAI_API_BASE_URL=https://api.openai.com/v1\nMODEL_NAME=\"gpt-3.5-turbo\"\n</code></pre>"},{"location":"how-to/LLM-Connections/#fastchat","title":"FastChat","text":"<p>FastChat is an open platform for training, serving, and evaluating large language model based chatbots.</p> <p>GitHub</p> <p>API Documentation</p> <p>Configuration settings:</p> <pre><code># Required\nOPENAI_API_BASE_URL=\"http://localhost:8001/v1\"\nOPENAI_API_KEY=NA\nMODEL_NAME='oh-2.5m7b-q51'\n</code></pre>"},{"location":"how-to/LLM-Connections/#lm-studio","title":"LM Studio","text":"<p>Discover, download, and run local LLMs</p> <p>lmstudio.ai</p> <p>Configuration settings:</p> <pre><code># Required\nOPENAI_API_BASE_URL=\"http://localhost:8000/v1\"\n\nOPENAI_API_KEY=NA\nMODEL_NAME=NA\n</code></pre>"},{"location":"how-to/LLM-Connections/#mistral-api","title":"Mistral API","text":"<p>Mistral AI's API endpoints </p> <p>Mistral AI</p> <p>Documentation</p> <pre><code>OPENAI_API_KEY=your-mistral-api-key\nOPENAI_API_BASE=https://api.mistral.ai/v1\nMODEL_NAME=\"mistral-small\" # Check documentation for available models\n</code></pre>"},{"location":"how-to/LLM-Connections/#text-gen-web-ui","title":"text-gen-web-ui","text":"<p>A Gradio web UI for Large Language Models.</p> <p>GitHub</p> <p>API Documentation</p> <p>Configuration settings:</p> <pre><code># Required\nAPI_BASE_URL=http://localhost:5000\nOPENAI_API_KEY=NA\nMODEL_NAME=NA\n</code></pre>"},{"location":"how-to/LLM-Connections/#other-inference-api-endpoints","title":"Other Inference API Endpoints","text":"<p>Other platforms offer inference APIs such as Anthropic, Azure, and HuggingFace to name a few. Unfortunately, the APIs on the following platforms are not compatible with the OpenAI API specification. So, the following platforms will require a slightly different configuration than the examples in the previous section.</p>"},{"location":"how-to/LLM-Connections/#azure-open-ai","title":"Azure Open AI","text":"<p>Azure hosted OpenAI API endpoints have their own LLM component that needs to be imported from <code>langchain_openai</code>.</p> <p>For more information, check out the langchain documenation for Azure OpenAI.</p> <pre><code>from dotenv import load_dotenv\nfrom langchain_openai import AzureChatOpenAI\n\nload_dotenv()\n\ndefault_llm = AzureChatOpenAI(\n    openai_api_version=os.environ.get(\"AZURE_OPENAI_VERSION\", \"2023-07-01-preview\"),\n    azure_deployment=os.environ.get(\"AZURE_OPENAI_DEPLOYMENT\", \"gpt35\"),\n    azure_endpoint=os.environ.get(\"AZURE_OPENAI_ENDPOINT\", \"https://&lt;your-endpoint&gt;.openai.azure.com/\"),\n    api_key=os.environ.get(\"AZURE_OPENAI_KEY\")\n)\n\n# Create an agent and assign the LLM\nexample_agent = Agent(\n  role='Example Agent',\n  goal='Show how to assign a custom configured LLM',\n  backstory='You hang out in the docs section of GitHub repos.',\n  llm=default_llm\n)\n\n</code></pre> <p>Configuration settings:</p> <pre><code>AZURE_OPENAI_VERSION=\"2022-12-01\"\nAZURE_OPENAI_DEPLOYMENT=\"\"\nAZURE_OPENAI_ENDPOINT=\"\"\nAZURE_OPENAI_KEY=\"\"\n</code></pre>"}]}